/*
 * This file is generated by jOOQ.
 */
package com.sonicle.webtop.drm.jooq.tables;



/**
 * This class is generated by jOOQ.
 */
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DataSources extends org.jooq.impl.TableImpl<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.data_sources</code>
     */
    public static final DataSources DATA_SOURCES = new DataSources();

    /**
     * The class holding records for this type
     */
    @java.lang.Override
    public java.lang.Class<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord> getRecordType() {
        return com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord.class;
    }

    /**
     * The column <code>core.data_sources.data_source_id</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> DATA_SOURCE_ID = createField(org.jooq.impl.DSL.name("data_source_id"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>core.data_sources.domain_id</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> DOMAIN_ID = createField(org.jooq.impl.DSL.name("domain_id"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>core.data_sources.revision_timestamp</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, org.joda.time.DateTime> REVISION_TIMESTAMP = createField(org.jooq.impl.DSL.name("revision_timestamp"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", new com.sonicle.jooq.jsr310.OffsetDateTimeJodaConverter());

    /**
     * The column <code>core.data_sources.name</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> NAME = createField(org.jooq.impl.DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>core.data_sources.description</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> DESCRIPTION = createField(org.jooq.impl.DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>core.data_sources.type</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> TYPE = createField(org.jooq.impl.DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>core.data_sources.server_name</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> SERVER_NAME = createField(org.jooq.impl.DSL.name("server_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>core.data_sources.server_port</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.Integer> SERVER_PORT = createField(org.jooq.impl.DSL.name("server_port"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>core.data_sources.database_name</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> DATABASE_NAME = createField(org.jooq.impl.DSL.name("database_name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>core.data_sources.username</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> USERNAME = createField(org.jooq.impl.DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>core.data_sources.password</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> PASSWORD = createField(org.jooq.impl.DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>core.data_sources.driver_raw_props</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> DRIVER_RAW_PROPS = createField(org.jooq.impl.DSL.name("driver_raw_props"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>core.data_sources.pool_raw_props</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord, java.lang.String> POOL_RAW_PROPS = createField(org.jooq.impl.DSL.name("pool_raw_props"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    private DataSources(org.jooq.Name alias, org.jooq.Table<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DataSources(org.jooq.Name alias, org.jooq.Table<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord> aliased, org.jooq.Field<?>[] parameters) {
        super(alias, null, aliased, parameters, org.jooq.impl.DSL.comment(""), org.jooq.TableOptions.table());
    }

    /**
     * Create an aliased <code>core.data_sources</code> table reference
     */
    public DataSources(java.lang.String alias) {
        this(org.jooq.impl.DSL.name(alias), DATA_SOURCES);
    }

    /**
     * Create an aliased <code>core.data_sources</code> table reference
     */
    public DataSources(org.jooq.Name alias) {
        this(alias, DATA_SOURCES);
    }

    /**
     * Create a <code>core.data_sources</code> table reference
     */
    public DataSources() {
        this(org.jooq.impl.DSL.name("data_sources"), null);
    }

    public <O extends org.jooq.Record> DataSources(org.jooq.Table<O> child, org.jooq.ForeignKey<O, com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord> key) {
        super(child, key, DATA_SOURCES);
    }

    @java.lang.Override
    public org.jooq.Schema getSchema() {
        return com.sonicle.webtop.drm.jooq.Core.CORE;
    }

    @java.lang.Override
    public java.util.List<org.jooq.Index> getIndexes() {
        return java.util.Arrays.<org.jooq.Index>asList(com.sonicle.webtop.drm.jooq.Indexes.DATA_SOURCES_AK1);
    }

    @java.lang.Override
    public org.jooq.UniqueKey<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord> getPrimaryKey() {
        return com.sonicle.webtop.drm.jooq.Keys.DATA_SOURCES_PKEY;
    }

    @java.lang.Override
    public java.util.List<org.jooq.UniqueKey<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord>> getKeys() {
        return java.util.Arrays.<org.jooq.UniqueKey<com.sonicle.webtop.drm.jooq.tables.records.DataSourcesRecord>>asList(com.sonicle.webtop.drm.jooq.Keys.DATA_SOURCES_PKEY);
    }

    @java.lang.Override
    public DataSources as(java.lang.String alias) {
        return new DataSources(org.jooq.impl.DSL.name(alias), this);
    }

    @java.lang.Override
    public DataSources as(org.jooq.Name alias) {
        return new DataSources(alias, this);
    }

    /**
     * Rename this table
     */
    @java.lang.Override
    public DataSources rename(java.lang.String name) {
        return new DataSources(org.jooq.impl.DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @java.lang.Override
    public DataSources rename(org.jooq.Name name) {
        return new DataSources(name, null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @java.lang.Override
    public org.jooq.Row13<java.lang.String, java.lang.String, org.joda.time.DateTime, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.Integer, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String> fieldsRow() {
        return (org.jooq.Row13) super.fieldsRow();
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.sonicle.webtop.drm.jooq.tables;



/**
 * This class is generated by jOOQ.
 */
@java.lang.SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ____Customers extends org.jooq.impl.TableImpl<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>core.____customers</code>
     */
    public static final ____Customers ____CUSTOMERS = new ____Customers();

    /**
     * The class holding records for this type
     */
    @java.lang.Override
    public java.lang.Class<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord> getRecordType() {
        return com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord.class;
    }

    /**
     * The column <code>core.____customers.customer_id</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> CUSTOMER_ID = createField(org.jooq.impl.DSL.name("customer_id"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>core.____customers.description</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> DESCRIPTION = createField(org.jooq.impl.DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>core.____customers.type</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> TYPE = createField(org.jooq.impl.DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>core.____customers.address</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> ADDRESS = createField(org.jooq.impl.DSL.name("address"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>core.____customers.city</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> CITY = createField(org.jooq.impl.DSL.name("city"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>core.____customers.state</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> STATE = createField(org.jooq.impl.DSL.name("state"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>core.____customers.postalcode</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> POSTALCODE = createField(org.jooq.impl.DSL.name("postalcode"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>core.____customers.country</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> COUNTRY = createField(org.jooq.impl.DSL.name("country"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>core.____customers.telephone</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> TELEPHONE = createField(org.jooq.impl.DSL.name("telephone"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>core.____customers.email</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> EMAIL = createField(org.jooq.impl.DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(80), this, "");

    /**
     * The column <code>core.____customers.from_drm</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> FROM_DRM = createField(org.jooq.impl.DSL.name("from_drm"), org.jooq.impl.SQLDataType.VARCHAR(5), this, "");

    /**
     * The column <code>core.____customers.parent_id</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> PARENT_ID = createField(org.jooq.impl.DSL.name("parent_id"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>core.____customers.external_id</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> EXTERNAL_ID = createField(org.jooq.impl.DSL.name("external_id"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>core.____customers.status</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> STATUS = createField(org.jooq.impl.DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR(1), this, "");

    /**
     * The column <code>core.____customers.domain_id</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> DOMAIN_ID = createField(org.jooq.impl.DSL.name("domain_id"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>core.____customers.km</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> KM = createField(org.jooq.impl.DSL.name("km"), org.jooq.impl.SQLDataType.VARCHAR(15), this, "");

    /**
     * The column <code>core.____customers.lock</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> LOCK = createField(org.jooq.impl.DSL.name("lock"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>core.____customers.note</code>.
     */
    public final org.jooq.TableField<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord, java.lang.String> NOTE = createField(org.jooq.impl.DSL.name("note"), org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    private ____Customers(org.jooq.Name alias, org.jooq.Table<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ____Customers(org.jooq.Name alias, org.jooq.Table<com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord> aliased, org.jooq.Field<?>[] parameters) {
        super(alias, null, aliased, parameters, org.jooq.impl.DSL.comment(""), org.jooq.TableOptions.view("create view \"____customers\" as  SELECT sis_customer.customer_id,\n    sis_customer.description,\n    sis_customer.type,\n    sis_customer.address,\n    sis_customer.city,\n    sis_customer.state,\n    sis_customer.postalcode,\n    sis_customer.country,\n    NULL::character varying(50) AS telephone,\n    NULL::character varying(80) AS email,\n    NULL::character varying(5) AS from_drm,\n    NULL::character varying(15) AS parent_id,\n    NULL::character varying(100) AS external_id,\n    NULL::character varying(1) AS status,\n    NULL::character varying(15) AS domain_id,\n    (sis_customer.km)::character varying(15) AS km,\n    NULL::character varying(20) AS lock,\n    NULL::character varying(2000) AS note\n   FROM fn.dblink('dbname=sis'::text, '\r\n		SELECT 	IDANAGRAFICA AS CUSTOMER_ID,\r\nDESCRIZIONE AS DESCRIPTION,\r\n	CASE \r\nWHEN TIPO=''C'' THEN ''C''\r\n	WHEN TIPO=''E'' THEN ''C''\r\n WHEN TIPO=''F'' THEN ''F''\r\n END \r\n AS TYPE,\r\nINDIRIZZO AS ADDRESS,\r\nCITTA AS CITY,\r\nPROVINCIA AS STATE,\r\nCAP AS POSTALCODE,\r\nNAZIONE AS COUNTRY,\r\ndistanzakm AS KM\r\n\r\n		FROM ANAGRAFICA \r\n		WHERE TIPO IN (''C'',''E'',''F'')'::text) sis_customer(customer_id character varying(15), description character varying(50), type character varying(1), address character varying(100), city character varying(30), state character varying(30), postalcode character varying(20), country character varying(30), km character varying(30));"));
    }

    /**
     * Create an aliased <code>core.____customers</code> table reference
     */
    public ____Customers(java.lang.String alias) {
        this(org.jooq.impl.DSL.name(alias), ____CUSTOMERS);
    }

    /**
     * Create an aliased <code>core.____customers</code> table reference
     */
    public ____Customers(org.jooq.Name alias) {
        this(alias, ____CUSTOMERS);
    }

    /**
     * Create a <code>core.____customers</code> table reference
     */
    public ____Customers() {
        this(org.jooq.impl.DSL.name("____customers"), null);
    }

    public <O extends org.jooq.Record> ____Customers(org.jooq.Table<O> child, org.jooq.ForeignKey<O, com.sonicle.webtop.drm.jooq.tables.records.____CustomersRecord> key) {
        super(child, key, ____CUSTOMERS);
    }

    @java.lang.Override
    public org.jooq.Schema getSchema() {
        return com.sonicle.webtop.drm.jooq.Core.CORE;
    }

    @java.lang.Override
    public ____Customers as(java.lang.String alias) {
        return new ____Customers(org.jooq.impl.DSL.name(alias), this);
    }

    @java.lang.Override
    public ____Customers as(org.jooq.Name alias) {
        return new ____Customers(alias, this);
    }

    /**
     * Rename this table
     */
    @java.lang.Override
    public ____Customers rename(java.lang.String name) {
        return new ____Customers(org.jooq.impl.DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @java.lang.Override
    public ____Customers rename(org.jooq.Name name) {
        return new ____Customers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row18 type methods
    // -------------------------------------------------------------------------

    @java.lang.Override
    public org.jooq.Row18<java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String> fieldsRow() {
        return (org.jooq.Row18) super.fieldsRow();
    }
}
